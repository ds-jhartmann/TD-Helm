# Default values for simple-spring-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# Simple Spring App config
app:
  postgres:
    # -- JDBC URL to the postgreSQL database
    jdbcurl: "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/test"
    # -- Name for the custom postgreSWL user
    username: &postgresuser "testuser"
    # -- Name of existing secret to use for PostgreSQL credentials.
    existingSecret: &existingSecret test-secret

# PostgreSQL config
postgresql:
  global:
    postgresql:
      auth:
        # -- Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
        existingSecret: *existingSecret
        # -- Name for a custom user to create (overrides `auth.username`)
        username: *postgresuser
        # -- Name for a custom database to create (overrides `auth.database`)
        database: "test"
        secretKeys:
          # -- Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
          adminPasswordKey: postgresAdminPassword
          # -- Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
          userPasswordKey: postgresPassword
  primary:
    persistence:
      # -- Enable PostgreSQL Primary data persistence using PVC
      enabled: false
      # -- PVC Storage Request for PostgreSQL volume
      size: 1Gi


image:
  repository: dsjhartmann/simple-spring-app
  # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy) to use
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
imagePullSecrets: []
# -- String to partially override simple-spring-app.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override simple-spring-app.fullname template
fullnameOverride: ""

# -- additional annotations for the pod
podAnnotations: {}
# -- additional labels for the pod
podLabels: {}

# -- The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
podSecurityContext:
  seccompProfile:
    # -- Restrict a Container's Syscalls with seccomp
    type: RuntimeDefault
  # -- Runs all processes within a pod with a special uid
  runAsUser: 10000
  # -- Processes within a pod will belong to this guid
  runAsGroup: 3000
  # -- The owner for volumes and any files created within volumes will belong to this guid
  fsGroup: 3000

# The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
securityContext:
  capabilities:
    # -- Specifies which capabilities to drop to reduce syscall attack surface
    drop:
      - ALL
    # -- Specifies which capabilities to add to issue specialized syscalls
    add: []
  # -- Whether the root filesystem is mounted in read-only mode
  readOnlyRootFilesystem: true
  # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
  allowPrivilegeEscalation: false
  # -- Requires the container to run without root privileges
  runAsNonRoot: true
  # -- The container's process will run with the specified uid
  runAsUser: 10000
  # -- The container's process will run with the specified gid
  runAsGroup: 3000

service:
  # -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) to expose the running application on a set of Pods as a network service.
  type: ClusterIP
  # -- port for incoming api calls
  port: 8080

## Ingress declaration to expose the network service.
ingress:
  enabled: false
  # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
  className: "nginx"
  # -- Additional ingress annotations to add
  annotations: {}
  hosts:
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    - host: chart-example.local
      paths:
        # -- path for incoming api calls
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Set container requests and limits for different resources like CPU or memory (essential for production workloads)
resources:
   limits:
     cpu: 500m
     memory: 0.5Gi
   requests:
     cpu: 500m
     memory: 0.5Gi

livenessProbe:
  httpGet:
    # -- Path to the service liveness endpoint
    path: /actuator/health/liveness
    port: http
  # -- when a probe fails kubernetes will try 6 times before giving up
  failureThreshold: 10
  # -- seconds to wait before performing the first liveness check
  initialDelaySeconds: 10
  # -- this fields specifies that kubernetes should perform a liveness check every 10 seconds
  periodSeconds: 5
  # -- number of consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- number of seconds after which the probe times out
  timeoutSeconds: 5

readinessProbe:
  httpGet:
    # -- Path to the service readiness endpoint
    path: /actuator/health/readiness
    port: http
  # -- when a probe fails kubernetes will try 6 times before giving up
  failureThreshold: 10
  # -- seconds to wait before performing the first readiness check
  initialDelaySeconds: 10
  # -- this fields specifies that kubernetes should perform a readiness check every 10 seconds
  periodSeconds: 5
  # -- number of consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- number of seconds after which the probe times out
  timeoutSeconds: 5
